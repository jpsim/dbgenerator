#!/usr/bin/env ruby

=begin
Copyright 2016 - Niji

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
=end

if RUBY_VERSION < '2.0.0'
  abort 'error: DBGenerator requires Ruby 2 or higher.'
end

if $0 == __FILE__
  $:.unshift File.expand_path('../lib', File.dirname(__FILE__))
end
require 'dbgenerator'
require 'optparse'

dir = Dir.pwd
options = {
    :model => nil,
    :android_dir => nil,
    :package => nil,
    :ios_dir => nil,
    :ios_json => false,
    :ios_framework => false,
    :ios_swift => false
}

OptionParser.new do |opts|
  opts.banner = 'Usage: dbgenerator [options]'
  opts.on('-m PATH', '--model PATH', %q(Specify Interface Builder .xcdatamodel file)) do |path|
    options[:model] = path
  end
  opts.on('-a PATH', '--android PATH', %q(Specify Android Realm model classes dir)) do |path|
    options[:android_dir] = path
  end
  opts.on('-p PATH', '--package PATH', %q(Specify Android Realm model classes package name)) do |path|
    options[:package] = path
  end
  opts.on('-i PATH', '--ios PATH', %q(Specify iOS Realm model classes dir)) do |path|
    options[:ios_dir] = path
  end
  opts.on('-j', '--json', %q(Additionally generate Realm-JSON categories (Objective-C) or ObjectMapper artifacts (Swift))) do
    options[:ios_json] = true
  end
  opts.on('-f', '--framework', %q(If you use CocoaPods Frameworks instead of static libraries)) do
    options[:ios_framework] = true
  end
  opts.on('-s', '--swift', %q(If you use Swift as iOS language)) do
    options[:ios_swift] = true
  end
  opts.on('-n', '--nsnumber', %q(To generate NSNumbers instead of Int/BOOL/Float types)) do
    options[:wrappers] = true
  end
  opts.on('-w', '--wrappers', %q(To generate Java primitive wrappers for optional fields instead of primitive types)) do
    options[:wrappers] = true
  end
  opts.on('-x', '--annotations', %q(To tag code with Android support annotations according to optional/non optional fields)) do
    options[:annotations] = true
  end
  opts.on_tail('-h', '--help', %q(Show this message)) { puts opts; exit 1 }
  opts.on_tail('-v', '--version', 'Show version') { puts DBGenerator::VERSION; exit }
  opts.parse!
end

if options[:model].nil?
  Log::info('No model provided, trying to find one in the local directoryâ€¦')
  options[:model] = File.find_xcdatamodel(dir)
  Log::info("Unable to find any .xcdatamodel in #{dir}") if options[:model].nil?
end

if options[:model].nil?
  DBGenerator.exit_with_error('You need to specify .xcdatamodel path using --model option (see --help for more info)')
else
  basename = File.basename(options[:model])
  dirname = File.dirname(options[:model])
  Log::success("Using #{basename} in #{dirname}")
end

# Android
if options[:android_dir].nil?
  Log::info('You need to specify a dir using --android option to generate Android Realm model classes (see --help for more info)')
else
  if Dir.exist?(options[:android_dir])
    if options[:package].nil?
      Log::info('You need to specify an Android package name using --package option (see --help for more info)')
    else
      xcdatamodel = DBGenerator::XCDataModel::Parser::XCDataModel.new(options[:model])
      DBGenerator::Realm::Java::Generator.new(options[:android_dir], options[:package], xcdatamodel, options[:wrappers], options[:annotations])
    end
  else
    Log::info('You need to specify a valid Android Realm model classes dir')
  end
end

# iOS
if options[:ios_dir].nil?
  Log::info('You need to specify a dir using --ios option to generate iOS Realm model classes (see --help for more info)')
else
  if Dir.exist?(options[:ios_dir])
    xcdatamodel = DBGenerator::XCDataModel::Parser::XCDataModel.new(options[:model])
    if options[:ios_swift]
      DBGenerator::Realm::Swift::Generator.new(options[:ios_dir], xcdatamodel, options[:ios_json])
    else
      DBGenerator::Realm::ObjC::Generator.new(options[:ios_dir], xcdatamodel, options[:ios_json], options[:ios_framework], options[:wrappers])
    end
  else
    Log::info('You need to specify a valid iOS Realm model classes dir')
  end
end
